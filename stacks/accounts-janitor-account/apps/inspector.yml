Transform: AWS::Serverless-2016-10-31
Description: Infrastructure for horatio inspector
Parameters:
  Environment:
    Description: The infrastructure environment
    Type: String
    AllowedValues:
      - test
      - live
Resources:
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: !Sub "${Environment}-horatio-inspector-execution-role"
      Policies:
        - PolicyName: horatio-inspector-execution-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - arn:aws:iam::008356366354:role/horatio-list-accounts-role
                  - arn:aws:iam::*:role/horatio-inspection-target-account-role
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - Fn::ImportValue: !Sub "${Environment}-horatio-report-queue-arn"
  Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: inspector.main.handler
      Runtime: python3.9
      CodeUri: ../../../apps/inspector/build
      Role: !GetAtt FunctionExecutionRole.Arn
      FunctionName: !Sub "${Environment}-horatio-inspector"
      MemorySize: 256
      Timeout: 120
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL:
            Fn::ImportValue: !Sub "${Environment}-horatio-report-queue-url"
          POWERTOOLS_SERVICE_NAME: horatio-inspector
          POWERTOOLS_METRICS_NAMESPACE: !Sub "horatio/${Environment}/inspector"
          POWERTOOLS_TRACER_CAPTURE_ERROR: false
          LOG_LEVEL: INFO
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: states.amazonaws.com
      Policies:
        - PolicyName: state-machine-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt Function.Arn
  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${Environment}-horatio-inspector"
      RoleArn: !GetAtt StateMachineRole.Arn
      Definition:
        StartAt: InvokeLambdas
        States:
          InvokeLambdas:
            Type: Parallel
            End: true
            Branches:
              - StartAt: VPC
                States:
                  VPC:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: VPC
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
              - StartAt: EC2
                States:
                  EC2:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: EC2
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
              - StartAt: Budgets
                States:
                  Budgets:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: BUDGETS
                        REGIONS:
                          - eu-west-1
              - StartAt: IAM
                States:
                  IAM:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: IAM
                        REGIONS:
                          - us-east-1
              - StartAt: SNS
                States:
                  SNS:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: SNS
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
              - StartAt: CodeStarConnections
                States:
                  CodeStarConnections:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: CODESTAR_CONNECTIONS
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
              - StartAt: CodePipeline
                States:
                  CodePipeline:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: CODEPIPELINE
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
              - StartAt: CodeBuild
                States:
                  CodePipeline:
                    Type: Task
                    End: true
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      # despite the parameter being called FunctionName, it actually takes an ARN
                      FunctionName: !GetAtt Function.Arn
                      Payload:
                        SERVICE: CODEBUILD
                        REGIONS:
                          - eu-west-1
                          - eu-west-2
                          - us-east-1
  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: !Sub "${Environment}-horatio-inspector-scheduler-role"
      Policies:
        - PolicyName: horatio-inspector-scheduler-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref StateMachine
  Schedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: !Sub "${Environment}-horatio-inspector"
      ScheduleExpression: cron(0 09 * * ? *)
      ScheduleExpressionTimezone: Europe/London
      FlexibleTimeWindow:
        Mode: "OFF"
      Target:
        Arn: !Ref StateMachine
        RoleArn: !GetAtt SchedulerRole.Arn
  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      Namespace: AWS/States
      MetricName: ExecutionsFailed
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 60
      TreatMissingData: notBreaching
      Statistic: Sum
      Threshold: 0
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue notification-topic-arn
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StateMachine
